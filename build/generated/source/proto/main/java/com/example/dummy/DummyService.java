// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dummy.proto

package com.example.dummy;

/**
 * Protobuf service {@code DummyService}
 */
public  abstract class DummyService
    implements com.google.protobuf.Service {
  protected DummyService() {}

  public interface Interface {
    /**
     * <code>rpc DummyHello(.DummyMessage) returns (.DummyMessage);</code>
     */
    public abstract void dummyHello(
        com.google.protobuf.RpcController controller,
        com.example.dummy.DummyMessage request,
        com.google.protobuf.RpcCallback<com.example.dummy.DummyMessage> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new DummyService() {
      @java.lang.Override
      public  void dummyHello(
          com.google.protobuf.RpcController controller,
          com.example.dummy.DummyMessage request,
          com.google.protobuf.RpcCallback<com.example.dummy.DummyMessage> done) {
        impl.dummyHello(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.dummyHello(controller, (com.example.dummy.DummyMessage)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.example.dummy.DummyMessage.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.example.dummy.DummyMessage.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc DummyHello(.DummyMessage) returns (.DummyMessage);</code>
   */
  public abstract void dummyHello(
      com.google.protobuf.RpcController controller,
      com.example.dummy.DummyMessage request,
      com.google.protobuf.RpcCallback<com.example.dummy.DummyMessage> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return com.example.dummy.DummyProto.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.dummyHello(controller, (com.example.dummy.DummyMessage)request,
          com.google.protobuf.RpcUtil.<com.example.dummy.DummyMessage>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.example.dummy.DummyMessage.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.example.dummy.DummyMessage.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends com.example.dummy.DummyService implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void dummyHello(
        com.google.protobuf.RpcController controller,
        com.example.dummy.DummyMessage request,
        com.google.protobuf.RpcCallback<com.example.dummy.DummyMessage> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.example.dummy.DummyMessage.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.example.dummy.DummyMessage.class,
          com.example.dummy.DummyMessage.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public com.example.dummy.DummyMessage dummyHello(
        com.google.protobuf.RpcController controller,
        com.example.dummy.DummyMessage request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public com.example.dummy.DummyMessage dummyHello(
        com.google.protobuf.RpcController controller,
        com.example.dummy.DummyMessage request)
        throws com.google.protobuf.ServiceException {
      return (com.example.dummy.DummyMessage) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.example.dummy.DummyMessage.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:DummyService)
}

