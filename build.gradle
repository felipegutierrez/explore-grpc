plugins {
    id 'java'
    id 'com.google.protobuf' version '0.8.10'
    id 'idea'
    id 'jacoco'
}

group 'org.github.felipegutierrez.explore.grpc'
version '1.0'

def grpc_version = "1.24.0"
def mongodb_version = "4.1.1"
def junit_version = "4.13"
def junit_jupiter_version = "5.6.0"
def protobuf_version = "3.10.0"

repositories {
    mavenCentral()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

dependencies {
    // gRPC
    // implementation "io.grpc:grpc-netty:$grpc_version" // only grpc-netty-shaded includes SSL libraries for gRPC
    implementation "io.grpc:grpc-netty-shaded:$grpc_version"
    implementation "io.grpc:grpc-protobuf:$grpc_version"
    implementation "io.grpc:grpc-stub:$grpc_version"
    implementation "io.grpc:grpc-services:$grpc_version" // reflection

    // mongodb
    compile "org.mongodb:mongodb-driver-sync:$mongodb_version"

    // Unit tests
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    testImplementation "io.grpc:grpc-testing:$grpc_version"
}

test {
    useJUnit()
    useJUnitPlatform {
        includeEngines 'junit-vintage'
        // excludeEngines 'junit-jupiter'
    }
    maxHeapSize = '1G'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

// if you have source imports issues, add the below
sourceSets.main.java.srcDir new File(buildDir, 'generated/source')
idea {
    module {
        // Marks the already(!) added srcDir as "generated"
        generatedSourceDirs += file('build/generated/source')
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

check.dependsOn jacocoTestReport
